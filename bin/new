#!/bin/bash

CONFIG_FILE="$HOME/.new"
USER_TEMPLATES=()

if [[ -f $CONFIG_FILE ]]; then
  while IFS=: read -r name command; do
    USER_TEMPLATES+=("$name:$command")
  done < "$CONFIG_FILE"
fi

# Declare color variables
if [[ $TERM == *color* ]]; then
  COLOR_NEW="\e[1;32m"
  COLOR_TYPE="\e[1;33m"
  COLOR_APP_NAME="\e[1;34m"
  COLOR_ARGUMENTS="\e[1;35m" 
  COLOR_ERROR="\e[1;31m"
  COLOR_RESET="\e[0m"
else
  COLOR_NEW=""
  COLOR_TYPE=""
  COLOR_APP_NAME=""
  COLOR_ARGUMENTS="" 
  COLOR_ERROR=""
  COLOR_RESET=""
fi

# Declare a simple array for project types
PROJECT_TYPES=("angular" "astro" "django" "flask" "gatsby" "laravel" "marko" "next" "nuxt" "payload" "poem" "react" "rails" "rust" "svelte" "spring" "vite" "vue")

# Declare an array for commands
COMMANDS=(
  "ng new [app-name]"
  "yarn create astro [app-name]"
  "django-admin startproject [app-name]"
  "mkdir [app-name] && cd [app-name] && python -m venv venv && source venv/bin/activate && pip install Flask"
  "npx gatsby new [app-name]"
  "composer create-project --prefer-dist laravel/laravel [app-name]"
  "npx create-marko [app-name]"
  "npx create-next-app [app-name]"
  "npx nuxi init"
  "npx create-payload-app -n [app-name] [arguments...]"
  "mkdir [app-name] && cd [app-name] cargo add poem"
  "npx create-react-app [app-name]"
  "rails new [app-name]"
  "cargo new [app-name] [arguments...]"
  "npx degit sveltejs/template [app-name]"
  "curl https://start.spring.io/starter.zip -d dependencies=web -d name=[app-name]"
  "yarn create vite [app-name]"
  "vue create [app-name]"
)

# Declare a variable for usage message
USAGE_MESSAGE="${COLOR_NEW}new${COLOR_RESET} ${COLOR_TYPE}[type]${COLOR_RESET} ${COLOR_APP_NAME}[app-name]${COLOR_RESET} ${COLOR_ARGUMENTS}[arguments...]${COLOR_RESET} \n"

# Declare show_help function
show_help() {
  printf "Usage: $USAGE_MESSAGE \n"
  printf "Options:\n" 
  printf "  --help, -h         Show this help message \n"
  printf "  --templates, -t    Show all templates \n"
  printf "  --add-template     Add or override a custom template \n"
  printf "  --remove-template  Remove a custom template \n"
  exit 0
}

# Check for help flag
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
  show_help
fi

# Function to show available templates
show_templates() {
  printf "Available templates:\n"
  for i in "${!PROJECT_TYPES[@]}"; do
    printf "${COLOR_TYPE}${PROJECT_TYPES[$i]}${COLOR_RESET}\t"
    command_colored="${COMMANDS[$i]}"
    command_colored="${command_colored//\[app-name\]/${COLOR_APP_NAME}[app-name]${COLOR_RESET}}"
    command_colored="${command_colored//\[arguments...\]/${COLOR_ARGUMENTS}[arguments...]${COLOR_RESET}}"
    printf "  ${COLOR_COMMAND}${command_colored}${COLOR_RESET}\n"
  done

  if [[ -f "$CONFIG_FILE" ]]; then

    if [[ -s "$CONFIG_FILE" ]]; then
        printf "\nUser-defined templates:\n"
        while IFS=: read -r user_template_name user_command; do
            printf "${COLOR_TYPE}${user_template_name}${COLOR_RESET}\t"

            user_command_colored="${user_command}"
            user_command_colored="${user_command_colored//\[app-name\]/${COLOR_APP_NAME}[app-name]${COLOR_RESET}}"
            user_command_colored="${user_command_colored//\[arguments...\]/${COLOR_ARGUMENTS}[arguments...]${COLOR_RESET}}"
            
            printf "  ${COLOR_COMMAND}${user_command_colored}${COLOR_RESET}\n"
        done < "$CONFIG_FILE"
    fi
  fi
  exit 0
}

# Check for help flag
if [[ "$1" == "-t" || "$1" == "--templates" ]]; then
  show_templates
fi

add_template() {
  printf "${COLOR_TYPE}Enter template name: ${COLOR_RESET}"
  read -r template_name
  printf "${COLOR_TYPE}Enter command: ${COLOR_RESET}"
  read -r command

  if [[ -n "$template_name" && -n "$command" ]]; then
    # Replace the template if it already exists, otherwise append it
    sed -i.bak "/^$template_name:/d" "$CONFIG_FILE"  # Remove existing template
    printf "$template_name:$command\n" >> "$CONFIG_FILE"  # Add new/updated template
    printf "${COLOR_TYPE}${template_name}${COLOR_RESET} ${COLOR_NEW}template added or updated.${COLOR_RESET} \n"
    exit 0
  else
    printf "${COLOR_ERROR}Error: Template name or command cannot be empty.${COLOR_RESET} \n"
    exit 1
  fi
}

# Check for add-template flag
if [[ "$1" == "--add-template" ]]; then
  add_template
  exit 0
fi

remove_template() {
  printf "${COLOR_TYPE}Enter template name to remove: ${COLOR_RESET}"
  read -r template_name

  if [[ -z "$template_name" ]]; then
    printf "${COLOR_ERROR}Error: Template name cannot be empty.${COLOR_RESET}\n"
    exit 1
  fi

  # Check if the configuration file exists
  if [[ -f "$CONFIG_FILE" ]]; then
    # Use sed to delete the line corresponding to the template
    sed -i.bak "/^$template_name:/d" "$CONFIG_FILE"
    
    # Check if any deletion was made
    if [[ $? -eq 0 ]]; then
      printf "${COLOR_TYPE}${template_name}${COLOR_RESET} ${COLOR_NEW}template removed.${COLOR_RESET}\n"
    else
      printf "${COLOR_ERROR}Error: Template '${template_name}' not found.${COLOR_RESET}\n"
    fi
  else
    printf "${COLOR_ERROR}Error: Configuration file does not exist.${COLOR_RESET}\n"
  fi
  exit 0
}

# Check if the remove template option was passed
if [[ "$1" == "--remove-template" ]]; then
  remove_template
  exit 0
fi

# Check if enough arguments have been provided
if [ "$#" -lt 1 ]; then
  printf "Usage: $USAGE_MESSAGE\n"  # Print only the usage message
  exit 1
fi

# Variables
TYPE=$1
APP_NAME=${2:-""}
ARGUMENTS="${@:3}"  # Capture all arguments from the third one onward

# Function to check if a command exists
check_command() {
  command -v "$1" >/dev/null 2>&1 || {
    printf "${COLOR_ERROR}Error: The command '%s' is not found. Would you like to install it?${COLOR_RESET} (y/n)\n" "$1"
    read -r answer
    if [[ "$answer" == "y" ]]; then
      case "$1" in
        ng)
          printf "Installing Angular CLI...\n"
          npm install -g @angular/cli
          ;;
        cargo)
          printf "Installing Rust and Cargo...\n"
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
          printf "Please add \$HOME/.cargo/bin to your PATH.\n"
          ;;
        composer)
          printf "Installing Composer...\n"
          curl -sS https://getcomposer.org/installer | php
          mv composer.phar /usr/local/bin/composer
          ;;
        # Add other commands as needed
        *)
          printf "${COLOR_ERROR}No installation script available for '%s'. Please install it manually.${COLOR_RESET}\n" "$1"
          ;;
      esac
    else
      printf "${COLOR_ERROR}Aborting project creation.${COLOR_RESET}\n"
      exit 1
    fi
  }
}

# Check if the project type is supported by user-defined templates first
if [[ -f "$CONFIG_FILE" ]]; then
    while IFS=: read -r user_template_name user_command; do
        if [[ "$TYPE" == "$user_template_name" ]]; then
            # Replace [app-name] and [arguments] in the user-defined command
            command="${user_command}"
            command="${command//\[app-name\]/$APP_NAME}"
            command="${command//\[arguments...\]/$ARGUMENTS}"
            # Attempt to run the command
            if ! eval $command; then
                # Extract the command name for error handling
                cmd_name=$(echo "$command" | awk '{print $1}')
                check_command "$cmd_name"  # Check if the command exists
            fi
            exit 0
        fi
    done < "$CONFIG_FILE"
fi

# Check if the project type is supported by predefined PROJECT_TYPES
for i in "${!PROJECT_TYPES[@]}"; do
    if [[ "$TYPE" == "${PROJECT_TYPES[$i]}" ]]; then
        command="${COMMANDS[$i]}"
        command="${command//\[app-name\]/$APP_NAME}"
        command="${command//\[arguments...\]/$ARGUMENTS}"
        # Attempt to run the command
        if ! eval $command; then
          # Extract the command name for error handling
          cmd_name=$(echo "$command" | awk '{print $1}')
          check_command "$cmd_name"  # Check if the command exists
        fi
        exit 0
    fi
done

printf "${COLOR_ERROR}Unsupported project type:${COLOR_RESET} ${COLOR_TYPE}$TYPE${COLOR_RESET}\n"
exit 1
